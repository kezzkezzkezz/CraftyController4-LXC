#!/bin/bash

# Utility functions and core functionality for LXC container installation

# Variables function to set global configuration
variables() {
    # Application name (set by calling script)
    NSAPP="${APP:-UnknownApp}"
    
    # Get the next available container ID
    NEXTID=$(pvesh get /cluster/nextid)
}

# Color definitions for consistent output
color() {
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    YELLOW='\033[1;33m'
    BLUE='\033[0;34m'
    NC='\033[0m' # No Color
}

# Error handling and trap
catch_errors() {
    trap 'error_handler $LINENO' ERR
}

# Centralized error handler
error_handler() {
    local line_number=$1
    
    echo -e "${RED}[ERROR]${NC} An error occurred on line $line_number"
    echo -e "${YELLOW}[WARN]${NC} Command that failed: $BASH_COMMAND"
    exit 1
}

# Messaging functions
msg_info() {
    echo -e "${YELLOW}[INFO]${NC} $1"
}

msg_ok() {
    echo -e "${GREEN}[OK]${NC} $1"
}

msg_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

msg_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

# Echo default settings (can be overridden by specific scripts)
echo_default() {
    msg_info "Container Configuration:"
    echo -e "  Container Type: ${CT_TYPE:-Not Set}"
    echo -e "  Container ID: ${CT_ID:-Not Set}"
    echo -e "  Hostname: ${HN:-Not Set}"
    echo -e "  Disk Size: ${DISK_SIZE:-Not Set} GB"
    echo -e "  CPU Cores: ${CORE_COUNT:-Not Set}"
    echo -e "  RAM Size: ${RAM_SIZE:-Not Set} MB"
    echo -e "  Network Bridge: ${BRG:-vmbr0}"
    echo -e "  Network Config: ${NET:-dhcp}"
}

# Description setter for the container
description() {
    if [[ -z "$CT_ID" ]]; then
        msg_error "Container ID not set. Cannot set description."
        return 1
    fi
    
    local desc="LXC Container for ${APP:-Unknown Application}"
    
    if [[ -n "$PASSWORD" ]]; then
        desc+=" | Initial Password Set"
    fi
    
    msg_info "Setting container description"
    pct set "$CT_ID" -description "$desc"
    msg_ok "Description set successfully"
}

# Core container build function
build_container() {
    # Validate required variables
    if [[ -z "$CT_ID" || -z "$HN" || -z "$DISK_SIZE" ]]; then
        msg_error "Missing required container configuration variables"
        exit 1
    fi
    
    # Ask user for LVM selection
    read -p "Do you want to use LVM for disk (y/n)? " use_lvm
    if [[ "$use_lvm" =~ ^[Yy]$ ]]; then
        msg_info "Using LVM for root filesystem."
        DISK_TYPE="lvm"
    else
        msg_info "Using standard disk setup."
        DISK_TYPE="standard"
    fi
    
    # Validate template path
    local TEMPLATE="${var_os:-debian}-${var_version:-12}-standard_12.7-1_amd64.tar.zst"
    
    if ! [ -f "/var/lib/vz/template/cache/$TEMPLATE" ]; then
        msg_error "Template $TEMPLATE not found in /var/lib/vz/template/cache/"
        exit 1
    fi

    msg_info "Creating LXC container ${CT_ID}"
    
    # Create container with specified parameters
    if [[ "$DISK_TYPE" == "lvm" ]]; then
        # If LVM is selected, set up LVM for the container
        pct create "$CT_ID" "local:vztmpl/$TEMPLATE" \
            -hostname "$HN" \
            -rootfs "local-lvm:$DISK_SIZE" \
            -cores "${CORE_COUNT:-2}" \
            -memory "${RAM_SIZE:-2048}" \
            -net0 "name=eth0,bridge=${BRG:-vmbr0},ip=${NET:-dhcp}"
    else
        # Default disk setup
        pct create "$CT_ID" "local:vztmpl/$TEMPLATE" \
            -hostname "$HN" \
            -rootfs "local:$DISK_SIZE" \
            -cores "${CORE_COUNT:-2}" \
            -memory "${RAM_SIZE:-2048}" \
            -net0 "name=eth0,bridge=${BRG:-vmbr0},ip=${NET:-dhcp}"
    fi
    
    msg_ok "Container ${CT_ID} created successfully"
    
    # Start the container
    pct start "$CT_ID"
    msg_ok "Container ${CT_ID} started"
}

# Main start function to initialize the process
start() {
    # Clear the screen for clean output
    clear
    
    # Ensure script is run as root
    if [[ $EUID -ne 0 ]]; then
        msg_error "This script must be run as root"
        exit 1
    fi
    
    msg_info "Initializing ${APP:-Application} LXC Container Installation"
}

# Placeholder for any post-installation tasks
post_install() {
    # Can be overridden by specific installation scripts
    msg_info "Running post-installation tasks"
}

# Run the installation
start
build_container
description
post_install

