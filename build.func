variables() {
    NSAPP="Crafty"
    NEXTID=$(pvesh get /cluster/nextid)
    CT_ID=$NEXTID
    DISK_SIZE_DEFAULT="20"
    CORE_COUNT_DEFAULT="2"
    RAM_SIZE_DEFAULT="2048"
    BRG_DEFAULT="vmbr0"
    NET_DEFAULT="dhcp"
}

color() {
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    YELLOW='\033[1;33m'
    NC='\033[0m' # No Color
}

msg_info() {
    echo -e "${YELLOW}[INFO]${NC} $1"
}

msg_ok() {
    echo -e "${GREEN}[OK]${NC} $1"
}

msg_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

msg_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

catch_errors() {
    trap 'msg_error "An error occurred. Exiting..."; exit 1' ERR
}

start() {
    msg_info "Starting the setup process..."
}

build_container() {
    msg_info "Building LXC container..."
    pct create $CT_ID local:vztmpl/debian-12-standard_12.7-1_amd64.tar.zst \
        --hostname $NSAPP --rootfs local-lvm:$DISK_SIZE_DEFAULT \
        --cores $CORE_COUNT_DEFAULT --memory $RAM_SIZE_DEFAULT \
        --net0 name=eth0,bridge=$BRG_DEFAULT,ip=$NET_DEFAULT
    pct start $CT_ID
    msg_ok "Container built successfully."
}

display_default_settings() {
    msg_info "Default settings applied:"
    echo -e "  Hostname: $NSAPP"
    echo -e "  Disk Size: ${DISK_SIZE_DEFAULT}GB"
    echo -e "  CPU Cores: $CORE_COUNT_DEFAULT"
    echo -e "  RAM: ${RAM_SIZE_DEFAULT}MB"
}

description() {
    msg_info "Setting container description..."
    pct set $CT_ID -description "LXC container for $NSAPP on Proxmox."
    msg_ok "Description set."
}

finish_setup() {
    # Enable auto-start for the container
    msg_info "Enabling auto-start for LXC container..."
    pct set $CT_ID --onboot 1
    msg_ok "Auto-start enabled."

    # Fetch and display container's IP address with retry mechanism
    msg_info "Fetching container IP address..."
    for i in {1..5}; do
        IP=$(pct exec $CT_ID -- ip -4 addr show eth0 | grep -oP '(?<=inet\s)\d+(\.\d+){3}')
        if [[ -n "$IP" ]]; then
            break
        fi
        msg_warn "IP not available yet. Retrying... ($i/5)"
        sleep 5
    done

    if [[ -z "$IP" ]]; then
        IP="(Unable to fetch IP, check container networking)"
        msg_warn "Could not retrieve IP address."
    fi
    msg_ok "Container IP address: $IP"

    # Output access information for Crafty
    msg_info "Crafty Installation Completed!"
    echo -e "Access Crafty Controller at: http://${IP}:8000"
    echo -e "Make sure to configure Crafty as needed."
}

# Call the functions to start the process
catch_errors
variables
color
start
build_container
display_default_settings
description
finish_setup
